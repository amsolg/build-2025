name: Check for broken links

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  workflow_dispatch:  # Allow manual triggering
  pull_request:
    paths:
      - '**/*.md'
      - '.github/workflows/link-checker.yml'

jobs:
  check-links:
    name: Check links
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install requests beautifulsoup4 markdown
        
      - name: Run link checker
        run: python link_checker.py
        
      - name: Upload broken links report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: broken-links-report
          path: broken_links_report.md
          if-no-files-found: ignore
          
      - name: Comment on PR with report summary
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              if (fs.existsSync('broken_links_report.md')) {
                const reportContent = fs.readFileSync('broken_links_report.md', 'utf8');
                const reportLines = reportContent.split('\n');
                
                // Extract summary (first few lines of the report)
                const summary = reportLines.slice(0, 3).join('\n');
                
                // Count broken links
                const brokenLinksCount = reportLines.filter(line => line.startsWith('- Line ')).length;
                
                // Create comment content
                let commentBody = `## Broken Links Check\n\n${summary}\n\n`;
                
                if (brokenLinksCount > 0) {
                  commentBody += `⚠️ This PR contains broken links. Please review the [full report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.\n\n`;
                  commentBody += 'Consider fixing these links before merging the PR.';
                } else {
                  commentBody += '✅ No broken links found in this PR.';
                }
                
                // Post comment on PR
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              } else {
                console.log('No report file found, skipping comment');
              }
            } catch (error) {
              console.error('Error creating PR comment:', error);
            }